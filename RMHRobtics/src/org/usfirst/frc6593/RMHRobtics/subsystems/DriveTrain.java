// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6593.RMHRobtics.subsystems;

import org.usfirst.frc6593.RMHRobtics.Robot;
import org.usfirst.frc6593.RMHRobtics.RobotMap;
import org.usfirst.frc6593.RMHRobtics.commands.*;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	public static ADXRS450_Gyro gyro;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightSC = RobotMap.driveTrainrightSC;
    private final SpeedController leftSC = RobotMap.driveTrainleftSC;
    private final RobotDrive robotDrive21 = RobotMap.driveTrainRobotDrive21;
    private final AnalogInput rangeFinder = RobotMap.driveTrainRangeFinder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double kAngleSetpoint = 0.0;
	private static final double kP = 0.005; // propotional turning constant
	//private static Joystick joystick = Robot.oi.getXbox_Joystick();

	
//	public double gyroKP(){
//		return this.kp;
//	}
	
	//public double gyroRateScale = gyro.getRate();
	

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	public void tankdrive(double leftSpeed, double rightSpeed){
		robotDrive21.tankDrive(leftSpeed, rightSpeed);
		
	}
	
	public void drivestraight(double Speed){
		robotDrive21.tankDrive(Speed, Speed);
	}
	
	public void gyroDrive(double leftSpeed, double rightSpeed){

		robotDrive21.tankDrive(leftSpeed, rightSpeed);
		if (gyro != null)
        {
            //
            // Gyro assist is enabled.
            //
			double drivePower = (Robot.oi.getDriveLeftSpeed() + Robot.oi.getDriveRightSpeed())/2.0;
			double stickDifferential = Robot.oi.getDriveLeftSpeed() - Robot.oi.getDriveRightSpeed();
			double motorDifferential = kP*(stickDifferential - gyro.getRate());
			leftSC.set(drivePower + motorDifferential);
			rightSC.set(drivePower - motorDifferential);
        }
	}
	
	
	
	public void GyroRoateDrive(double speed){
		//gyro.reset();
        
		
	            double angle = gyro.getAngle(); // get current heading
	            robotDrive21.drive(-1.0, -angle*kP); // drive towards heading 0
	            Timer.delay(0.004);
	        
        
            //robotDrive21.drive(speed, speed);
	}
	
	public void teleopGyroStraight(Joystick joystick){
		/*double turningValue = (kAngleSetpoint - gyro.getAngle()) * kP;
		// Invert the direction of the turn if we are going backwards
		turningValue = Math.copySign(turningValue, joystick.getY());*/
		double angle = gyro.getAngle();
		robotDrive21.drive(joystick.getY(), -angle*kP/*turningValue*/);
		Timer.delay(0.0004);
	}
	
	public void GyroReset(){
		gyro.reset();
	}


	public void stop(){

		robotDrive21.drive(0,0);
	}
	

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.

    }
}

